
function sendEmail(executionContext) {
    var formContext = executionContext.getFormContext();
    var price_adj = formContext.getAttribute("tcs_pricingadjustment").getValue();
    var businessUnitName= formContext.getAttribute("sun_currentuserbusinessunit").getValue();
    console.log(businessUnitName);
    var recordId = formContext.data.entity.getId().replace("{", "").replace("}", "");
    console.log(recordId);
    var EntityName = formContext.data.entity.getEntityName();
    console.log(recordId);


    // GUIDs for users (Sender: CRMAdmin, Receivers: Nasir and Kishore)
    var crmAdminGUID = "65e28723-4259-ef11-a317-002248099b5a"; // Sender: CRMAdmin
    var nasirGUID = "4941591b-4a73-ee11-9ae7-000d3a32fae8"; // Receiver: Nasir
    var kishoreGUID = "80e87416-4a73-ee11-9ae7-002248049c83"; // Receiver: Kishore

    // Get the userId
    var userId = Xrm.Utility.getGlobalContext().userSettings.userId;
    console.log(userId);
    userId = userId.replace("{", "").replace("}", "");
    console.log("modified userid " + userId);

    try {
        // Retrieve the business unit name of the user
        //var result = Xrm.WebApi.online.retrieveRecord("systemuser", userId, "?$select=fullname&$expand=businessunitid($select=name)");

        //var businessUnitName = result["businessunitid"] ? result["businessunitid"]["name"] : null;
        

        if (businessUnitName !== "Sun Tyre - India Team") {
            // Case when price_adj is greater than or equal to 2
            if (price_adj >= 2) {
                // Display a confirmation dialog
                var confirmMessage = "A price adjustment greater than 2 requires approval. Would you like to send an approval request?";
                var confirmButton = confirm(confirmMessage); // This creates a simple confirmation box

                // If the user clicks "Yes" (OK)
                if (confirmButton) {
                    // Send approval email
                    sendApprovalEmail(crmAdminGUID, [nasirGUID, kishoreGUID],price_adj,recordId);
                    console.log("Email sent, form save will be prevented.");
                    // Prevent form save after the email is sent
                    executionContext.getEventArgs().preventDefault();
                } else {
                
                    console.log("User chose not to send the email, form save will be prevented.");
                     // Prevent form save if the user clicks "No"
                    executionContext.getEventArgs().preventDefault();
                }
            }
            // Case when price_adj is less than 2
            else if (price_adj < 2) {
                // Send update email
                sendUpdateEmail(crmAdminGUID,[nasirGUID, kishoreGUID],price_adj,recordId);
            }
        }
    } catch (error) {
        console.error("Error retrieving user details: " + error.message);
    }
}

//  function to send approval email
function sendApprovalEmail(senderGUID, recipientGUIDs, price_adj, recordId) {
  var emailSubject = "Alert: Price Adjustment Review Needed";

  var emailBody = `<p>Hello Team,</p><br>
            <p>There has been an attempt to update the price adjustment to <b>${price_adj}</b>. As the adjustment exceeds the 2% threshold, your approval is required. Please review and approve the changes at your earliest convenience.</p><br>
            <p>Click <strong><a href='https://suntyreusa-dev.crm.dynamics.com/main.aspx?appid=680104e4-ff7a-ed11-81ac-00224805c916&forceUCI=1&pagetype=entityrecord&etn=tcs_customerpricing&id=${recordId}'>here</a></strong> to review the adjustments.</p><br>
            <p><em>This is an autogenerated email. Please do not reply.</em></p>`;

  // Create party list for 'from' (sender)
  var activityParties = [];
  
  // From - Participation Type Mask = 1
  var Sender = {
      "partyid_systemuser@odata.bind": "/systemusers(" + senderGUID + ")",
      "participationtypemask": 1
  };
  activityParties.push(Sender);
  
  // To - Participation Type Mask = 2
  recipientGUIDs.forEach(function(recipientGUID) {
      var Receipent = {
          "partyid_systemuser@odata.bind": "/systemusers(" + recipientGUID + ")",
          "participationtypemask": 2
      };
      activityParties.push(Receipent);
  });

  var createEmailRequest = {
      "description": emailBody,
      "regardingobjectid_tcs_customerpricing@odata.bind": "/tcs_customerpricings(" + recordId + ")",
      "subject": emailSubject,
      "email_activity_parties": activityParties
  };

  // Create the email record using the Web API
  Xrm.WebApi.createRecord('email', createEmailRequest).then(
      function success(Email) {
          console.log("Email has been created with ID: " + Email.id);
          
          // trigger Power automate flow
          triggerFlow(emailBody, emailSubject, recordId, activityParties);
      },
      function error(e) {
          console.error("Error creating email: " + e.message);
      }
  );
}


// Async function to send update email
function sendUpdateEmail(senderGUID, recipientGUIDs,price_adj,recordId) {
    var emailSubject = "Notification: Customer Pricing Adjusted";
    var emailBody = `<p>Hello Team,</p><br>
                <p>The pricing adjustment has been updated to <b>${price_adj}</b>.</p><br>
                <p>Click <strong><a href='https://suntyreusa-dev.crm.dynamics.com/main.aspx?appid=680104e4-ff7a-ed11-81ac-00224805c916&forceUCI=1&pagetype=entityrecord&etn=tcs_customerpricing&id=${recordId}'>here</a></strong> to review the adjustments.</p><br>
                <p><em>This is an autogenerated email. Please do not reply.</em></p>`;

    // Create party list for 'from' (sender)
     var activityParties = [];
  
  // From - Participation Type Mask = 1
  var Sender = {
      "partyid_systemuser@odata.bind": "/systemusers(" + senderGUID + ")",
      "participationtypemask": 1
  };
  activityParties.push(Sender);
  
  // To - Participation Type Mask = 2
  recipientGUIDs.forEach(function(recipientGUID) {
      var Receipent = {
          "partyid_systemuser@odata.bind": "/systemusers(" + recipientGUID + ")",
          "participationtypemask": 2
      };
      activityParties.push(Receipent);
  });

  var createEmailRequest = {
      "description": emailBody,
      "regardingobjectid_tcs_customerpricing@odata.bind": "/tcs_customerpricings(" + recordId + ")",
      "subject": emailSubject,
      "email_activity_parties": activityParties
  };

  // Create the email record using the Web API
  Xrm.WebApi.createRecord('email', createEmailRequest).then(
      function success(Email) {
          console.log("Email has been created with ID: " + Email.id);
          
          // trigger Power Automate flow 
          triggerFlow(emailBody, emailSubject, recordId, activityParties);
      },
      function error(e) {
          console.error("Error creating email: " + e.message);
      }
  );
}

// function to trigger flow 
function triggerFlow(emailBody, emailSubject, recordId, activityParties) {
    //var formContext = executionContext.getFormContext();
    //var RecordID = formContext.data.entity.getId().replace("{", "").replace("}", "");
    //var EntityName = formContext.data.entity.getEntityName();

    // Flow URL
    var flowUrl = "https://prod-144.westus.logic.azure.com:443/workflows/cee8995935b94990be1cf3dcdf6069ee/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=5YRrdqeZhBzfqeOq2VhyaQJQpEP2fXS_xnz4Ln7pt2A";
    
    // Prepare JSON body with dynamic data
    var inputdata = JSON.stringify({
        "description": emailBody,
        "subject": emailSubject,
        "regardingobjectid_tcs_customerpricing@odata.bind": "/tcs_customerpricings(" + recordId + ")",
        "email_activity_parties": activityParties
    });

    // Send HTTP request to trigger the flow
    var req = new XMLHttpRequest();
    req.open("POST", flowUrl, true);
    req.setRequestHeader('Content-Type', 'application/json');
    req.send(inputdata);

    req.onload = function() {
        if (req.status >= 200 && req.status < 300) {
            console.log("Flow triggered successfully!");
        } else {
            console.error("Failed to trigger flow. Status: " + req.status + " Response: " + req.responseText);
        }
    };
}
